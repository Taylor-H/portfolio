{"version":3,"file":"static/js/506.d57f2c7a.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","components/Contact/index.js"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} userID - set the EmailJS user ID\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (userID, origin = 'https://api.emailjs.com') => {\n    store._userID = userID;\n    store._origin = origin;\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, userID) => {\n    const uID = userID || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.4.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import React, { useRef, useState } from 'react';\nimport emailjs from '@emailjs/browser';\nimport { init } from '@emailjs/browser';\n// import { StyledSlideMenu, CloseMenuIcon, FaGithubIcon } from '../Styled/';\n\n\ninit(process.env.REACT_APP_USER_ID);\nconst Contact = () => {\n  const formState = useRef();\n\n  const [formResult , setResult] = useState({formResult: ''});\n  const [formData, setFormData] = useState({\n    firstname: '',\n    lastname: '',\n    company: '',\n    phone: '',\n    email: '',\n    message: '',\n  });\n\nconst sendEmail = (e) => {\n  e.preventDefault();\n    emailjs.sendForm(`${process.env.REACT_APP_SERVICE_ID}`, `${process.env.REACT_APP_TEMPLATE_ID}`, formState.current, `${process.env.REACT_APP_USER_ID}`)\n        .then((result) => {\n            console.log('formResult', formState);\n            (result.text === 'OK') ? setResult(result.text): alert('Message failed to send');\n        }, (error) => {\n            console.log(error.text);\n        });\n    };\n\nconst successHTML = <div className=\"success\">\n  <h5 id=\"detail-header\">Thank you.</h5>Your message has been sent. I will get back to you as soon as possible.\n  </div>;\n\nconst formHTML = (\n  <>\n    <h5 id=\"detail-header\">Interested in working with me?</h5>\n    <p>This form will send me an email message.</p>\n    <div className=\"connect-form\">\n      <form id=\"email\" ref={formState} onSubmit={sendEmail}>\n        <div>\n          <input\n            className=\"input-box\"\n            type=\"text\"\n            name=\"firstname\"\n            onChange={setFormData}\n            placeholder={'First Name:'}\n          />\n          <input\n            className=\"input-box\"\n            type=\"text\"\n            name=\"lastname\"\n            placeholder=\"Last Name:\"\n            onChange={setFormData}\n          />\n        </div>\n        <div>\n          <input\n            className=\"input-box\"\n            type=\"text\"\n            name=\"company\"\n            placeholder=\"Company\"\n            onChange={setFormData}\n          />\n          <input\n            className=\"input-box\"\n            id=\"em-field\"\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email Address:\"\n            onChange={setFormData}\n          />\n        </div>\n        <div>\n          <input\n            className=\"subject\"\n            type=\"text\"\n            name=\"phone\"\n            placeholder=\"phone\"\n            onChange={setFormData}\n          />\n        </div>\n        <div>\n          <textarea\n            className=\"comment-area\"\n            name=\"message\"\n            placeholder=\"Message: \"\n            onChange={setFormData}\n          ></textarea>\n        </div>\n\n        <div>\n          <button className=\"connect-submit\" type=\"submit\" value={formData}>\n            Send\n          </button>\n        </div>\n      </form>\n    </div>\n  </>\n);\n  return (\n    <>\n      <div className=\"con-h\">\n        {formResult === 'OK' ? successHTML : formHTML}\n      </div>\n    </>\n  );\n}\n\n\nexport default Contact;\n"],"names":["store","_origin","init","userID","origin","_userID","validateParams","serviceID","templateID","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","EmailJSResponseStatus","httpResponse","instance","TypeError","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","responseStatus","open","keys","forEach","setRequestHeader","send","form","uID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","process","formState","useRef","useState","formResult","setResult","firstname","lastname","company","phone","email","message","setFormData","successHTML","className","id","formHTML","ref","onSubmit","e","preventDefault","emailjs","current","then","result","console","log","alert","error","type","name","onChange","placeholder","value"],"sourceRoot":""}